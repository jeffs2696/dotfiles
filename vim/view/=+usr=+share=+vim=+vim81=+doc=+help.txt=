let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
argglobal
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <PageDown> :call HardModeEcho(g:HardMode_hardmodeMsg)
inoremap <buffer> <PageUp> :call HardModeEcho(g:HardMode_hardmodeMsg)
inoremap <buffer> <Down> :call HardModeEcho(g:HardMode_hardmodeMsg)
inoremap <buffer> <Up> :call HardModeEcho(g:HardMode_hardmodeMsg)
inoremap <buffer> <Right> :call HardModeEcho(g:HardMode_hardmodeMsg)
inoremap <buffer> <Left> :call HardModeEcho(g:HardMode_hardmodeMsg)
nnoremap <buffer> + :call HardModeEcho(g:HardMode_hardmodeMsg)
vnoremap <buffer> + :call HardModeEcho(g:HardMode_hardmodeMsg)
nnoremap <buffer> - :call HardModeEcho(g:HardMode_hardmodeMsg)
vnoremap <buffer> - :call HardModeEcho(g:HardMode_hardmodeMsg)
nnoremap <buffer> gj :call HardModeEcho(g:HardMode_hardmodeMsg)
nnoremap <buffer> gk :call HardModeEcho(g:HardMode_hardmodeMsg)
vnoremap <buffer> gk :call HardModeEcho(g:HardMode_hardmodeMsg)
vnoremap <buffer> gj :call HardModeEcho(g:HardMode_hardmodeMsg)
nnoremap <buffer> h :call HardModeEcho(g:HardMode_hardmodeMsg)
vnoremap <buffer> h :call HardModeEcho(g:HardMode_hardmodeMsg)
nnoremap <buffer> j :call HardModeEcho(g:HardMode_hardmodeMsg)
vnoremap <buffer> j :call HardModeEcho(g:HardMode_hardmodeMsg)
nnoremap <buffer> k :call HardModeEcho(g:HardMode_hardmodeMsg)
vnoremap <buffer> k :call HardModeEcho(g:HardMode_hardmodeMsg)
nnoremap <buffer> l :call HardModeEcho(g:HardMode_hardmodeMsg)
vnoremap <buffer> l :call HardModeEcho(g:HardMode_hardmodeMsg)
vnoremap <buffer> <PageDown> :call HardModeEcho(g:HardMode_hardmodeMsg)
vnoremap <buffer> <PageUp> :call HardModeEcho(g:HardMode_hardmodeMsg)
vnoremap <buffer> <Down> :call HardModeEcho(g:HardMode_hardmodeMsg)
vnoremap <buffer> <Up> :call HardModeEcho(g:HardMode_hardmodeMsg)
vnoremap <buffer> <Right> :call HardModeEcho(g:HardMode_hardmodeMsg)
vnoremap <buffer> <Left> :call HardModeEcho(g:HardMode_hardmodeMsg)
nnoremap <buffer> <PageDown> :call HardModeEcho(g:HardMode_hardmodeMsg)
nnoremap <buffer> <PageUp> :call HardModeEcho(g:HardMode_hardmodeMsg)
nnoremap <buffer> <Down> :call HardModeEcho(g:HardMode_hardmodeMsg)
nnoremap <buffer> <Up> :call HardModeEcho(g:HardMode_hardmodeMsg)
nnoremap <buffer> <Right> :call HardModeEcho(g:HardMode_hardmodeMsg)
nnoremap <buffer> <Left> :call HardModeEcho(g:HardMode_hardmodeMsg)
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal backupcopy=
setlocal balloonexpr=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal nobuflisted
setlocal buftype=help
setlocal nocindent
setlocal cinkeys=0{,0},0),0],:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=nc
setlocal conceallevel=2
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal cursorlineopt=both
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'help'
setlocal filetype=help
endif
setlocal fixendofline
setlocal foldcolumn=0
setlocal nofoldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcroql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal formatprg=
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=-1
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},0),0],:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=!-~,^*,^|,^\",192-255
setlocal keywordprg=:help
setlocal nolinebreak
setlocal nolisp
setlocal lispwords=
setlocal list
setlocal makeencoding=
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal nomodeline
setlocal nomodifiable
setlocal nrformats=bin,octal,hex
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal readonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal scrolloff=-1
setlocal shiftwidth=4
setlocal noshortname
setlocal sidescrolloff=-1
setlocal signcolumn=auto
setlocal smartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en_us
setlocal statusline=%!airline#statusline(1)
setlocal suffixesadd=.tex,.sty,.cls
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'help'
setlocal syntax=help
endif
setlocal tabstop=8
setlocal tagcase=
setlocal tagfunc=
setlocal tags=
setlocal termwinkey=
setlocal termwinscroll=10000
setlocal termwinsize=
setlocal textwidth=78
setlocal thesaurus=
setlocal undofile
setlocal undolevels=-123456
setlocal varsofttabstop=
setlocal vartabstop=
setlocal wincolor=
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 9 - ((8 * winheight(0) + 12) / 25)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
9
normal! 0
lcd ~/OneDrive/College/Graduate\ School/Spring\ 2021/Advanced\ Fluid\ Mechanics/Homework/Homework\ 3/HW3tex
let &so = s:so_save | let &siso = s:siso_save
nohlsearch
doautoall SessionLoadPost
" vim: set ft=vim :
